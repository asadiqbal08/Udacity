{"version":3,"sources":["api/BooksAPI.js","components/ShelfChanger.js","components/BookShelfCategory.js","components/SearchBooks.js","components/SearchBookButton.js","components/BookShelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","search","query","method","Object","objectSpread","Content-Type","body","JSON","stringify","books","ShelfChanger","state","shelf","componentDidMount","current_shelf","_this","props","currentShelf","setState","_this2","this","_this$props","currentBook","onShelfChange","react_default","a","createElement","className","onChange","event","target","value","disabled","Component","BookShelfCategory","onBookShelfUpdate","onLoading","style","width","height","backgroundImage","undefined","imageLinks","thumbnail","components_ShelfChanger","selected_book","selected_shelf","id","title","authors","map","author","SearchBooks","searched_books","override","css","BooksAPI","results","error","shelf_books","el","outer_index","f","inner_index","items","loading","Link","to","type","placeholder","ClipLoader_default","size","color","searched_book","components_BookShelfCategory","key","SearchBookButton","BookShelf","BookShelf_templateObject","categories","name","filter","toLowerCase","filterCategories","category","index","components_SearchBookButton","BooksApp","updateBooksCollection","_book","currState","setLoadingState","_this3","_this$state","Route","path","render","components_SearchBooks","exact","components_BookShelf","React","ReactDOM","src_App","document","getElementById"],"mappings":"4PACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAGNS,EAAM,SAACC,GAAD,OACjBC,MAAK,GAAAC,OAAIb,EAAJ,WAAAa,OAAiBF,GAAU,CAAEJ,YAC/BO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,QAiBVC,EAAS,SAACC,GAAD,OACpBR,MAAK,GAAAC,OAAIb,EAAJ,WAAkB,CACrBqB,OAAQ,OACRd,QAAQe,OAAAC,EAAA,EAAAD,CAAA,GACHf,EADE,CAELiB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEP,YACtBN,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKW,SCURC,6MAhDXC,MAAO,CACHC,MAAO,UAGXC,kBAAoB,WAChB,IAAMC,EAAgBC,EAAKC,MAAMC,aAC7BH,GACAC,EAAKG,SAAS,iBAAM,CAChBN,MAAOE,8EAKV,IAAAK,EAAAC,KAAAC,EACkCD,KAAKJ,MAApCM,EADHD,EACGC,YAAaC,EADhBF,EACgBE,cACbX,EAAUQ,KAAKT,MAAfC,MAaR,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQE,SAAU,SAACC,GAAD,OAPR9B,EAO4BuB,EAPtBV,EAOmCiB,EAAMC,OAAOC,MANpEZ,EAAKD,SAAS,CAACN,MAAOA,SACtBW,EAAcxB,EAAMa,GAFP,IAACb,EAAMa,GAOwDmB,MAAOnB,GAC3EY,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAOC,UAAQ,GAA7B,cACAR,EAAAC,EAAAC,cAAA,UAAQK,MAAM,oBAAd,qBACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,cAAd,gBACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,QAAd,QACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,QAAd,iBArCOE,aC8CZC,EA5CW,SAAClB,GAAU,IAErBjB,EAAuCiB,EAAvCjB,KAAMoC,EAAiCnB,EAAjCmB,kBAAmBC,EAAcpB,EAAdoB,UAmBjC,OACIZ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACnCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaU,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,qBAAsCC,IAApB1C,EAAK2C,WAA2B,OAAS3C,EAAK2C,WAAWC,UAAY,IAAM,kHACrJnB,EAAAC,EAAAC,cAACkB,EAAD,CACsBrB,cAjBI,SAACsB,EAAeC,GFS1B,IAAC/C,EAAMa,EERbwB,GACAA,GAAU,IFOHrC,EELK8C,EFKCjC,EELckC,EFMzCrD,MAAK,GAAAC,OAAIb,EAAJ,WAAAa,OAAiBK,EAAKgD,IAAM,CAC/B7C,OAAQ,MACRd,QAAQe,OAAAC,EAAA,EAAAD,CAAA,GACHf,EADE,CAELiB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEI,YACtBjB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UEbsCF,KAAK,SAACc,GAC7C0B,GACAA,EAAkBU,MAYVvB,YAAavB,EACbkB,aAAclB,EAAKa,SAE3BY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAc5B,EAAKiD,OACjCjD,EAAKkD,SAAWzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgB5B,EAAKkD,QAAQC,IAAI,SAACC,GAAD,OAAYA,oMC0ClFC,6MAtEXzC,MAAQ,CACJ0C,eAAgB,MAGpBC,SAAWC,qBAcX3B,SAAW,SAACG,GACRyB,EAAgBzB,GACXpC,KAAK,SAAC8D,GACH,GAAIA,IAAYA,EAAQC,MAAO,CAC3B,IAAMC,EAAc5C,EAAKC,MAAM2C,YAC/BF,EAAQP,IAAI,SAACU,EAAIC,GACb,OAAOF,EAAYT,IAAI,SAACY,EAAGC,GAIvB,OAHIN,EAAQI,GAAad,KAAOY,EAAYI,GAAahB,KACrDU,EAAQI,GAAajD,MAAQ+C,EAAYI,GAAanD,OAEnD6C,EAAQI,OAI3B9C,EAAKG,SAAS,iBAAO,CACjBmC,eAAgBI,IAAYA,EAAQC,MAAQD,EAASA,EAAQO,oFAKpE,IAAA7C,EAAAC,KACGiC,EAAmBjC,KAAKT,MAAxB0C,eADHhC,EAE6CD,KAAKJ,MAA/CmB,EAFHd,EAEGc,kBAAmB8B,EAFtB5C,EAEsB4C,QAAS7B,EAF/Bf,EAE+Be,UACpC,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAMC,GAAG,IAAIxC,UAAU,gBAAvB,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,SACI0C,KAAK,OACLC,YAAY,4BACZzC,SAAU,SAACC,GAAD,OAAWV,EAAKS,SAASC,EAAMC,OAAOC,YAIxDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,CAAY8C,KAAM,GAAIhB,IAAKnC,KAAKkC,SAAUkB,MAAO,UAAWP,QAASA,IACrEzC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACR0B,EAAeH,IAAI,SAACuB,GAAD,OACjBjD,EAAAC,EAAAC,cAACgD,EAAD,CACIC,IAAKF,EAAc1B,GACnBhD,KAAM0E,EACNtC,kBAAmBA,EACnBC,UAAWA,gBA9DbH,aCGX2C,EARU,SAAC5D,GACtB,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAMC,GAAG,WAAT,+KCAZ,IAgEeU,EAhEG,SAAC7D,GAEf,IAAMsC,EAAWC,cAAHuB,KA4BFrE,EAAkDO,EAAlDP,MAAOwD,EAA2CjD,EAA3CiD,QAAS7B,EAAkCpB,EAAlCoB,UAAWD,EAAuBnB,EAAvBmB,kBAC7B4C,EAlBc,SAACtE,GACrB,MAAO,CACH,CACIuE,KAAM,oBACNvE,MAAOA,EAAMwE,OAAO,SAAAlF,GAAI,MAAiC,qBAA7BA,EAAKa,MAAMsE,iBAE3C,CACIF,KAAM,gBACNvE,MAAOA,EAAMwE,OAAO,SAAAlF,GAAI,MAAiC,eAA7BA,EAAKa,MAAMsE,iBAE3C,CACIF,KAAM,OACNvE,MAAOA,EAAMwE,OAAO,SAAAlF,GAAI,MAAiC,SAA7BA,EAAKa,MAAMsE,kBAM5BC,CAAiB1E,GAEpC,OACIe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACToD,EAAW7B,IAAI,SAACkC,EAAUC,GAAX,OACb7D,EAAAC,EAAAC,cAAA,OAAKiD,IAAKU,GACN7D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmByD,EAASJ,MAC1CxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,CAAY8C,KAAM,GAAIhB,IAAKD,EAAUkB,MAAO,UAAWP,QAASA,IAChEzC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACTyD,EAAS3E,MAAMyC,IAAI,SAACnD,GAAD,OAChByB,EAAAC,EAAAC,cAACgD,EAAD,CACIC,IAAK5E,EAAKgD,GACVhD,KAAMA,EACNoC,kBAAmBA,EACnBC,UAAWA,aAQ3CZ,EAAAC,EAAAC,cAAC4D,EAAD,oKCeDC,6MArEb5E,MAAQ,CACNgD,YAAa,GACbM,SAAS,KAGXX,SAAWC,qBAuBXiC,sBAAwB,SAAC3C,GACvBW,EAAaX,EAAcE,IAAIpD,KAAK,SAAC8F,GACjC1E,EAAKG,SAAS,SAACwE,GAAD,MAAgB,CAC1B/B,YAAa+B,EAAU/B,YAAYsB,OAAO,SAAClF,GAAD,OAAUA,EAAKgD,KAAO0C,EAAM1C,KAAIrD,OAAO+F,GACjFxB,SAAS,UAUnB0B,gBAAkB,SAAChF,GACjBI,EAAKG,SAAS,CAAC+C,QAAStD,wFA7BN,IAAAQ,EAAAC,KNLpB3B,MAAK,GAAAC,OAAIb,EAAJ,UAAiB,CAAEO,YACrBO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKW,QMIDd,KAAK,SAACc,GACpBU,EAAKD,SAAS,iBAAO,CACnByC,YAAalD,EACbwD,SAAS,wCA4BR,IAAA2B,EAAAxE,KAAAyE,EAC0BzE,KAAKT,MAA9BgD,EADDkC,EACClC,YAAaM,EADd4B,EACc5B,QACrB,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAOC,KAAK,UAAUC,OAAQ,kBAC5BxE,EAAAC,EAAAC,cAACuE,EAAD,CACEtC,YAAaA,EACbxB,kBAAmByD,EAAKJ,sBACxBvB,QAASA,EACT7B,UAAWwD,EAAKD,qBAGpBnE,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAOI,OAAK,EAACH,KAAK,IAAIC,OAAQ,kBAC1BxE,EAAAC,EAAAC,cAACyE,EAAD,CACE1F,MAAOkD,EACPM,QAASA,EACT7B,UAAWwD,EAAKD,gBAChBxD,kBAAmByD,EAAKJ,mCAjEjBY,IAAMnE,kBCJ7BoE,IAASL,OAAOxE,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.8a50ead2.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nclass ShelfChanger extends Component {\n    \n    state ={\n        shelf: \"none\"\n    }\n\n    componentDidMount = () => {\n        const current_shelf = this.props.currentShelf\n        if (current_shelf) {\n            this.setState(()=> ({\n                shelf: current_shelf\n            }))\n        }\n    }\n\n    render() {\n        const { currentBook, onShelfChange } = this.props\n        const { shelf } = this.state\n\n        /**\n         * @description Call on change of book category and set the local shelf state.\n         * @callBack\n         * @param {object} selected_book - selected book object.\n         * @param {string} selected_shelf - selected shelf option.\n        */\n        const onChange = (book, shelf) => {\n            this.setState({shelf: shelf});\n            onShelfChange(book, shelf);\n        }\n        \n        return(\n            <div className=\"book-shelf-changer\">\n                <select onChange={(event) => onChange(currentBook, event.target.value)} value={shelf}>\n                    <option value=\"move\" disabled>Move to...</option>\n                    <option value=\"currentlyReading\">Currently Reading</option>\n                    <option value=\"wantToRead\">Want to Read</option>\n                    <option value=\"read\">Read</option>\n                    <option value=\"none\">None</option>\n                </select>\n            </div>\n        )\n    }   \n}\n\nShelfChanger.propTypes = {\n    onShelfChange: PropTypes.func,\n    currentBook: PropTypes.object.isRequired,\n    currentShelf: PropTypes.string\n}\n\nexport default ShelfChanger","import React from 'react'\nimport ShelfChanger from './ShelfChanger'\nimport * as BooksAPI from '../api/BooksAPI'\nimport PropTypes from 'prop-types';\n\nconst BookShelfCategory = (props) => {\n\n        const { book, onBookShelfUpdate, onLoading } = props;        \n        \n        /**\n         * @description Update the book shelf category using remote api call.\n         * @callBack\n         * @param {object} selected_book - selected book object.\n         * @param {string} selected_shelf - selected shelf option.\n        */\n        const updateBookShelf = (selected_book, selected_shelf) => {\n            if (onLoading) {\n                onLoading(true)\n            }\n            BooksAPI.update(selected_book, selected_shelf).then((books) => {\n                if (onBookShelfUpdate) {\n                    onBookShelfUpdate(selected_book)\n                }\n            })\n        }\n\n        return(\n            <li>\n                <div className=\"book\">\n                    <div className=\"book-top\">\n<div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage:  book.imageLinks !== undefined ? 'url(' + book.imageLinks.thumbnail + ')' : 'url(\"http://books.google.com/books/content?id=nggnmAEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api\")' }}></div>\n\t\t\t\t\t\t<ShelfChanger \n                            onShelfChange={updateBookShelf} \n                            currentBook={book} \n                            currentShelf={book.shelf} />\n                    </div>\n                    <div className=\"book-title\">{book.title}</div>\n                    {book.authors && <div className=\"book-authors\">{book.authors.map((author) => author)}</div> }\n                </div>\n            </li>\n        )\n    }\n\nBookShelfCategory.propTypes = {\n    book: PropTypes.object.isRequired,\n    onLoading: PropTypes.func,\n    onBookShelfUpdate: PropTypes.func\n}\n\nexport default BookShelfCategory","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from '../api/BooksAPI'\nimport BookShelfCategory from './BookShelfCategory'\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/core\";\n\n\nclass SearchBooks extends Component {\n    state = {\n        searched_books: [],\n    }\n\n    override = css`\n        display: block;\n        margin: 0 auto;\n        border-color: green;\n        `;\n\n    /**\n     * @description It will be called whenever a user perform a search.\n     * Search API call does not contain the information of current book shelf.\n     * books returned in search results should be compared to books on shelf.\n     * If a book exists on shelf, the shelf on which the book resides on can be highlighted on the dropdown.\n     * @callback\n     * @param {string} value - query value to search.\n    */\n    onChange = (value) => {\n        BooksAPI.search(value)\n            .then((results) => {\n                if (results && !results.error) {\n                    const shelf_books = this.props.shelf_books\n                    results.map((el, outer_index) => { \n                        return shelf_books.map((f, inner_index) => {\n                            if (results[outer_index].id === shelf_books[inner_index].id) {\n                                results[outer_index].shelf = shelf_books[inner_index].shelf\n                            }\n                            return results[outer_index]\n                        })\n                    })\n                }\n                this.setState(() => ({\n                    searched_books: results && !results.error ? results: results.items\n                }))\n            })\n    }\n\n    render() {\n        const { searched_books } = this.state\n        const { onBookShelfUpdate, loading, onLoading } = this.props\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                <Link to='/' className=\"close-search\">Close</Link>  \n                <div className=\"search-books-input-wrapper\">\n                    <input \n                        type=\"text\"\n                        placeholder=\"Search by title or author\" \n                        onChange={(event) => this.onChange(event.target.value)}/>\n\n                </div>\n                </div>\n                <div className=\"search-books-results\">\n                <ClipLoader size={50} css={this.override} color={\"#123abc\"} loading={loading}/>\n                <ol className=\"books-grid\">\n                    { searched_books.map((searched_book) =>\n                        <BookShelfCategory \n                            key={searched_book.id} \n                            book={searched_book}\n                            onBookShelfUpdate={onBookShelfUpdate}\n                            onLoading={onLoading}/>\n                    )}\n                </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBooks","import React from 'react'\nimport { Link }  from 'react-router-dom'\n\nconst SearchBookButton = (props) => {\n    return(\n        <div className=\"open-search\">\n            <Link to=\"/search\">Add a book</Link>\n        </div>\n    )\n}\n\nexport default SearchBookButton","import React from 'react'\nimport BookShelfCategory from './BookShelfCategory'\nimport SearchBookButton from './SearchBookButton'\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst BookShelf = (props) =>  {\n\n    const override = css`\n        display: block;\n        margin: 0 auto;\n        border-color: green;\n        `;\n \n    \n    /**\n     * @description Filter books on the bases of their shelf category and return a array of objects.\n     * @param {array} books - Array of shelf books.\n    */\n    const filterCategories= (books) => {\n        return [\n            {\n                name: \"Currently Reading\",\n                books: books.filter(book => book.shelf.toLowerCase() === 'currentlyreading')\n            },\n            {\n                name: \"Wants To Read\",\n                books: books.filter(book => book.shelf.toLowerCase() === 'wanttoread')\n            },\n            {\n                name: \"Read\",\n                books: books.filter(book => book.shelf.toLowerCase() === 'read')\n            }\n        ]\n    }\n\n        const { books, loading, onLoading, onBookShelfUpdate }  = props\n        const categories = filterCategories(books)\n\n        return (\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                    <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                    <div className=\"bookshelf\">\n                        { categories.map((category, index) => \n                            <div key={index}> \n                                <h2 className=\"bookshelf-title\">{category.name}</h2>\n                                <div className=\"bookshelf-books\">\n                                    <ClipLoader size={50} css={override} color={\"#123abc\"} loading={loading}/>\n                                    <ol className=\"books-grid\">\n                                        {category.books.map((book) =>\n                                            <BookShelfCategory \n                                                key={book.id} \n                                                book={book} \n                                                onBookShelfUpdate={onBookShelfUpdate}\n                                                onLoading={onLoading} />\n                                        )}\n                                    </ol>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <SearchBookButton />\n            </div>\n        );\n}\n\nexport default BookShelf;","import React from 'react'\nimport './App.css'\nimport SearchBooks from './components/SearchBooks'\nimport BookShelf  from './components/BookShelf'\nimport { Route }  from 'react-router-dom'\nimport * as BooksAPI from './api/BooksAPI'\nimport { css } from \"@emotion/core\";\n\n\nclass BooksApp extends React.Component {\n  \n  state = {\n    shelf_books: [],\n    loading: true\n  }\n\n  override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: green;\n    `;\n\n  /**\n   * @description Fetching all the books from the server via api call getAll()\n  */\n  componentDidMount() {\n    BooksAPI.getAll().then((books) => {\n        this.setState(() => ({\n          shelf_books: books,\n          loading: false\n        }))\n    })\n  }\n\n  /**\n   * @description It will be called whenever there is an update occur in book category.\n   * @method\n   * @param {object} selected_book - Selected Book Object\n  */\n  updateBooksCollection = (selected_book) => {\n    BooksAPI.get(selected_book.id).then((_book) => {\n        this.setState((currState) => ({\n            shelf_books: currState.shelf_books.filter((book) => book.id !== _book.id).concat(_book),\n            loading: false\n        }))\n    })\n  }\n\n  /**\n   * @description Used for changing loading state used by loading component.\n   * @method\n   * @param {boolean} state - true/false\n  */\n  setLoadingState = (state) => {\n    this.setState({loading: state})\n  }\n\n  render() {\n    const { shelf_books, loading } = this.state\n    return (\n      <div className=\"app\">\n          <Route path='/search' render={() => (\n            <SearchBooks \n              shelf_books={shelf_books}\n              onBookShelfUpdate={this.updateBooksCollection}\n              loading={loading}\n              onLoading={this.setLoadingState} />\n          )}/>\n          \n          <Route exact path=\"/\" render={() => (\n              <BookShelf \n                books={shelf_books} \n                loading={loading}\n                onLoading={this.setLoadingState}\n                onBookShelfUpdate={this.updateBooksCollection}/>\n            )} \n          />\n      </div>\n    )}}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}